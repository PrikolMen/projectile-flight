:TickInterval = engine
:GetGravity = physenv
:TraceHull = util
:Simple = timer
:max = math

addonName = "Projectile Flight"
allowedClasses = {
    npc_grenade_bugbait: true
    prop_combine_ball: false
    npc_grenade_frag: false
    crossbow_bolt: true
    grenade_ar2: false
    rpg_missile: true
}

do

    fileName = string.gsub( string.lower( addonName ), "[%p%s%c]+", "_" ) .. ".json"
    if file.Exists( fileName, "DATA" )
        json = file.Read( fileName, "DATA" )
        if isstring( json )
            tbl = util.JSONToTable( json )
            if istable( tbl )
                table.Merge( allowedClasses, tbl )

    else

        file.Write( fileName, util.TableToJSON( allowedClasses, true ) )

do

    flags = bit.bor( FCVAR_ARCHIVE, FCVAR_NOTIFY )
    for className, default in pairs( allowedClasses )
        ConVar = CreateConVar( "mp_allow_flight_on_" .. className, default and "1" or "0", flags, "Allows players to fly on '" .. className .. "'.", 0, 1 )
        allowedClasses[ className ] = ConVar\GetBool!

        cvars.AddChangeCallback( ConVar\GetName!, ( _, __, value ) ->
            allowedClasses[ className ] = tobool( value )

        addonName )

MOVETYPE_WALK = MOVETYPE_WALK

hook.Add "OnEntityCreated", addonName, =>
    unless allowedClasses[ @GetClass! ]
        return

    Simple 0, ->
        unless @IsValid!
            return

        owner = @GetOwner!
        unless owner\IsValid! and owner\IsPlayer! and owner\GetMoveType! == MOVETYPE_WALK
            return

        if owner\GetInfo( "cl_projectile_flight_automatic" ) == "1"
            if owner\KeyDown( IN_WALK )
                return
        elseif not owner\KeyDown( IN_WALK )
            return

        owner[ addonName ] = @

MOVETYPE_NONE = MOVETYPE_NONE

traceResult = {}
trace = { output: traceResult }
halfTickInterval = 0

hook.Add "Move", addonName, ( mv ) =>
    entity = @[ addonName ]
    unless entity
        return

    unless entity\IsValid! and entity\GetMoveType! ~= MOVETYPE_NONE
        @[ addonName ] = nil
        return

    velocity = entity\GetVelocity!
    unless @Alive! and not mv\KeyDown( IN_JUMP ) and @GetMoveType! == MOVETYPE_WALK
        mv\SetVelocity( velocity )
        @[ addonName ] = nil
        return

    mins, maxs = @GetCollisionBounds!
    mins[ 3 ] = maxs[ 3 ] / 2

    filter = entity[ addonName ]
    unless filter
        className = entity\GetClass!
        filter = ( traceEntity ) ->
            switch traceEntity\GetClass!
                when "player"
                    return traceEntity ~= @
                when className
                    return traceEntity\GetOwner! ~= @

            return true

        entity[ addonName ] = filter

    halfTickInterval = TickInterval! * 0.5
    velocity = velocity * halfTickInterval

    trace.start = entity\WorldSpaceCenter!
    trace.endpos = trace.start - velocity
    trace.mins, trace.maxs = mins, maxs
    trace.filter = filter
    TraceHull( trace )

    if traceResult.Hit then
        @[ addonName ] = nil
        return

    mv\SetOrigin( trace.start )
    mv\SetVelocity( velocity - max( 1, @GetGravity! ) * GetGravity! * halfTickInterval )
